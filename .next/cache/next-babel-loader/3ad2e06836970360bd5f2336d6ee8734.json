{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/helloworld/nextjs-tutorial/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000',\n  cache: new InMemoryCache()\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  })));\n}\n\nexport default MyApp;\n/**\n * 페이지 전환시 레이아웃을 유지할 수 있습니다.\n페이지 전환시 상태값을 유지할 수 있습니다.\ncomponentDidCatch를 이용해서 커스텀 에러 핸들링을 할 수 있습니다.\n추가적인 데이터를 페이지로 주입시켜주는게 가능합니다.\n글로벌 CSS 를 이곳에 선언합니다.\n * \n */","map":{"version":3,"sources":["/home/ubuntu/helloworld/nextjs-tutorial/pages/_app.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;AAQA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,uBADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,SAASO,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAEvC,SAEC,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEL,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,SAAD,eAAeK,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CAFD;AAOD;;AAED,eAAeF,KAAf;AAGA","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000',\n  cache: new InMemoryCache()\n});\n\nfunction MyApp({ Component, pageProps }) {\n  \n  return(\n      \n   <ApolloProvider client={client}>\n    <Component {...pageProps} />\n   </ApolloProvider>\n   \n   )\n}\n\nexport default MyApp\n\n\n/**\n * 페이지 전환시 레이아웃을 유지할 수 있습니다.\n페이지 전환시 상태값을 유지할 수 있습니다.\ncomponentDidCatch를 이용해서 커스텀 에러 핸들링을 할 수 있습니다.\n추가적인 데이터를 페이지로 주입시켜주는게 가능합니다.\n글로벌 CSS 를 이곳에 선언합니다.\n * \n */\n"]},"metadata":{},"sourceType":"module"}