{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/home/ubuntu/helloworld/nextjs-tutorial/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nvar client = new ApolloClient({\n  uri: 'http://localhost:4000',\n  cache: new InMemoryCache()\n});\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  })));\n}\n\n_c = MyApp;\nexport default MyApp;\n/**\n * 페이지 전환시 레이아웃을 유지할 수 있습니다.\n페이지 전환시 상태값을 유지할 수 있습니다.\ncomponentDidCatch를 이용해서 커스텀 에러 핸들링을 할 수 있습니다.\n추가적인 데이터를 페이지로 주입시켜주는게 가능합니다.\n글로벌 CSS 를 이곳에 선언합니다.\n * \n */\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/ubuntu/helloworld/nextjs-tutorial/pages/_app.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","MyApp","Component","pageProps"],"mappings":";;;;AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;AAQA,IAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,uBADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,SAASO,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AAEvC,SAEC,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEL,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,SAAD,eAAeK,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CAFD;AAOD;;KATQF,K;AAWT,eAAeA,KAAf;AAGA","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000',\n  cache: new InMemoryCache()\n});\n\nfunction MyApp({ Component, pageProps }) {\n  \n  return(\n      \n   <ApolloProvider client={client}>\n    <Component {...pageProps} />\n   </ApolloProvider>\n   \n   )\n}\n\nexport default MyApp\n\n\n/**\n * 페이지 전환시 레이아웃을 유지할 수 있습니다.\n페이지 전환시 상태값을 유지할 수 있습니다.\ncomponentDidCatch를 이용해서 커스텀 에러 핸들링을 할 수 있습니다.\n추가적인 데이터를 페이지로 주입시켜주는게 가능합니다.\n글로벌 CSS 를 이곳에 선언합니다.\n * \n */\n"]},"metadata":{},"sourceType":"module"}